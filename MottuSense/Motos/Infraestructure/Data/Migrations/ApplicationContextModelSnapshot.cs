// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Motos.Infraestructure.Data.AppData;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace Motos.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Motos.Domain.Entities.EstruturaPatio", b =>
                {
                    b.Property<string>("IdPatio")
                        .HasColumnType("VARCHAR2(255)");

                    b.Property<decimal>("CoordenadaXEstrutura")
                        .HasColumnType("NUMBER");

                    b.Property<decimal>("CoordenadaYEstrutura")
                        .HasColumnType("NUMBER");

                    b.Property<decimal>("RotacaoEstrutura")
                        .HasColumnType("NUMBER");

                    b.Property<decimal>("TamanhoEstrutura")
                        .HasColumnType("NUMBER");

                    b.HasKey("IdPatio");

                    b.ToTable("TB_ESTRUTURA_PATIO");
                });

            modelBuilder.Entity("Motos.Domain.Entities.Evento", b =>
                {
                    b.Property<decimal>("IdEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<decimal>("IdEvento"));

                    b.Property<string>("CorEvento")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50)");

                    b.Property<string>("DescricaoEvento")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(500)");

                    b.HasKey("IdEvento");

                    b.ToTable("TB_EVENTO");

                    b.HasData(
                        new
                        {
                            IdEvento = 1m,
                            CorEvento = "VERDE",
                            DescricaoEvento = "A moto está preparada para ser alugada"
                        },
                        new
                        {
                            IdEvento = 2m,
                            CorEvento = "CINZA",
                            DescricaoEvento = "A moto chegou no patio"
                        },
                        new
                        {
                            IdEvento = 3m,
                            CorEvento = "CINZA",
                            DescricaoEvento = "A moto saiu do patio"
                        },
                        new
                        {
                            IdEvento = 4m,
                            CorEvento = "CINZA",
                            DescricaoEvento = "A moto está em manutenção"
                        },
                        new
                        {
                            IdEvento = 5m,
                            CorEvento = "VERMELHO",
                            DescricaoEvento = "A moto chegou sem placa"
                        },
                        new
                        {
                            IdEvento = 6m,
                            CorEvento = "VERMELHO",
                            DescricaoEvento = "A moto chegou precisando de manutenção"
                        });
                });

            modelBuilder.Entity("Motos.Domain.Entities.EventoMoto", b =>
                {
                    b.Property<string>("IdEventoMoto")
                        .HasColumnType("VARCHAR2(255)");

                    b.Property<DateTime>("DataHoraEvento")
                        .HasColumnType("TIMESTAMP");

                    b.Property<bool>("EventoVisualizado")
                        .HasColumnType("NUMBER(1)");

                    b.Property<decimal>("IdEvento")
                        .HasColumnType("NUMBER");

                    b.Property<string>("IdMoto")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(255)");

                    b.HasKey("IdEventoMoto");

                    b.HasIndex("IdEvento");

                    b.HasIndex("IdMoto");

                    b.ToTable("TB_EVENTO_MOTO");
                });

            modelBuilder.Entity("Motos.Domain.Entities.LocalizacaoMoto", b =>
                {
                    b.Property<string>("IdMoto")
                        .HasColumnType("VARCHAR2(255)");

                    b.Property<string>("LatitudeMoto")
                        .HasColumnType("VARCHAR2(500)");

                    b.Property<string>("LongitudeMoto")
                        .HasColumnType("VARCHAR2(500)");

                    b.HasKey("IdMoto");

                    b.ToTable("TB_LOCALIZACAO_MOTO");
                });

            modelBuilder.Entity("Motos.Domain.Entities.Moto", b =>
                {
                    b.Property<string>("IdMoto")
                        .HasColumnType("VARCHAR2(255)");

                    b.Property<string>("ChassiMoto")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(500)");

                    b.Property<string>("IdPatio")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(255)");

                    b.Property<string>("IotMoto")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(500)");

                    b.Property<string>("ModeloMoto")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100)");

                    b.Property<string>("PlacaMoto")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(50)");

                    b.Property<string>("StatusMoto")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(100)");

                    b.HasKey("IdMoto");

                    b.HasIndex("IdPatio");

                    b.HasIndex("PlacaMoto")
                        .IsUnique();

                    b.ToTable("TB_MOTO");
                });

            modelBuilder.Entity("Motos.Domain.Entities.Patio", b =>
                {
                    b.Property<string>("IdPatio")
                        .HasColumnType("VARCHAR2(255)");

                    b.Property<string>("EstruturaPatioCriada")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(255)");

                    b.Property<string>("IdFilial")
                        .IsRequired()
                        .HasColumnType("VARCHAR2(255)");

                    b.HasKey("IdPatio");

                    b.ToTable("TB_PATIO");

                    b.HasData(
                        new
                        {
                            IdPatio = "idTeste",
                            EstruturaPatioCriada = "0",
                            IdFilial = "idTeste"
                        },
                        new
                        {
                            IdPatio = "idTeste2",
                            EstruturaPatioCriada = "0",
                            IdFilial = "idTeste2"
                        });
                });

            modelBuilder.Entity("Motos.Domain.Entities.EstruturaPatio", b =>
                {
                    b.HasOne("Motos.Domain.Entities.Patio", "Patio")
                        .WithMany()
                        .HasForeignKey("IdPatio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");
                });

            modelBuilder.Entity("Motos.Domain.Entities.EventoMoto", b =>
                {
                    b.HasOne("Motos.Domain.Entities.Evento", "Evento")
                        .WithMany("EventosMoto")
                        .HasForeignKey("IdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Motos.Domain.Entities.Moto", "Moto")
                        .WithMany("EventosMoto")
                        .HasForeignKey("IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("Motos.Domain.Entities.LocalizacaoMoto", b =>
                {
                    b.HasOne("Motos.Domain.Entities.Moto", "Moto")
                        .WithOne("LocalizacaoMoto")
                        .HasForeignKey("Motos.Domain.Entities.LocalizacaoMoto", "IdMoto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Moto");
                });

            modelBuilder.Entity("Motos.Domain.Entities.Moto", b =>
                {
                    b.HasOne("Motos.Domain.Entities.Patio", "Patio")
                        .WithMany("Motos")
                        .HasForeignKey("IdPatio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patio");
                });

            modelBuilder.Entity("Motos.Domain.Entities.Evento", b =>
                {
                    b.Navigation("EventosMoto");
                });

            modelBuilder.Entity("Motos.Domain.Entities.Moto", b =>
                {
                    b.Navigation("EventosMoto");

                    b.Navigation("LocalizacaoMoto");
                });

            modelBuilder.Entity("Motos.Domain.Entities.Patio", b =>
                {
                    b.Navigation("Motos");
                });
#pragma warning restore 612, 618
        }
    }
}
